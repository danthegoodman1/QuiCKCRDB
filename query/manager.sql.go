// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: manager.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const checkQueueHasAtLeastOneItem = `-- name: CheckQueueHasAtLeastOneItem :one
select coalesce((
    select 1
    from quick_work_queue
    where queue_zone = $1
    limit 1
), 0)::bool
`

func (q *Queries) CheckQueueHasAtLeastOneItem(ctx context.Context, queueZone string) (bool, error) {
	row := q.db.QueryRow(ctx, checkQueueHasAtLeastOneItem, queueZone)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const dequeueItems = `-- name: DequeueItems :many
with toupdate as (
    select queue_zone, id, payload, priority, vesting_time, lease_id
    from quick_work_queue
      where quick_work_queue.queue_zone = $1
      and quick_work_queue.vesting_time <= now()
    order by priority, vesting_time
    limit $2
)
update quick_work_queue
set vesting_time = $3
from toupdate
where vesting_time <= now()
and quick_work_queue.queue_zone = toupdate.queue_zone
and quick_work_queue.id = toupdate.id
returning toupdate.queue_zone, toupdate.id, toupdate.payload, toupdate.priority, toupdate.vesting_time, toupdate.lease_id, quick_work_queue.queue_zone, quick_work_queue.id, quick_work_queue.payload, quick_work_queue.priority, quick_work_queue.vesting_time, quick_work_queue.lease_id
`

type DequeueItemsParams struct {
	QueueZone   string
	Limit       int32
	VestingTime sql.NullTime
}

type DequeueItemsRow struct {
	QueueZone     string
	ID            int64
	Payload       string
	Priority      sql.NullInt64
	VestingTime   sql.NullTime
	LeaseID       sql.NullString
	QueueZone_2   string
	ID_2          int64
	Payload_2     string
	Priority_2    sql.NullInt64
	VestingTime_2 sql.NullTime
	LeaseID_2     sql.NullString
}

func (q *Queries) DequeueItems(ctx context.Context, arg DequeueItemsParams) ([]DequeueItemsRow, error) {
	rows, err := q.db.Query(ctx, dequeueItems, arg.QueueZone, arg.Limit, arg.VestingTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DequeueItemsRow
	for rows.Next() {
		var i DequeueItemsRow
		if err := rows.Scan(
			&i.QueueZone,
			&i.ID,
			&i.Payload,
			&i.Priority,
			&i.VestingTime,
			&i.LeaseID,
			&i.QueueZone_2,
			&i.ID_2,
			&i.Payload_2,
			&i.Priority_2,
			&i.VestingTime_2,
			&i.LeaseID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obtainTopLevelQueue = `-- name: ObtainTopLevelQueue :one
update quick_top_level_queue
set lease_id = $1
  , vesting_time = $2
where queue_zone = $3
and lease_id = $4 -- ensure it's still how we last saw it
    returning lease_id
`

type ObtainTopLevelQueueParams struct {
	NewLease    sql.NullString
	VestingTime time.Time
	QueueZone   string
	KnownLease  sql.NullString
}

func (q *Queries) ObtainTopLevelQueue(ctx context.Context, arg ObtainTopLevelQueueParams) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, obtainTopLevelQueue,
		arg.NewLease,
		arg.VestingTime,
		arg.QueueZone,
		arg.KnownLease,
	)
	var lease_id sql.NullString
	err := row.Scan(&lease_id)
	return lease_id, err
}
