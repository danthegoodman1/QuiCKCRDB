// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: scanner.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const obtainTopLevelQueue = `-- name: ObtainTopLevelQueue :one
update quick_top_level_queue
set lease_id = $1
, vesting_time = $2
where queue_zone = $3
returning lease_id
`

type ObtainTopLevelQueueParams struct {
	LeaseID     sql.NullString
	VestingTime time.Time
	QueueZone   string
}

func (q *Queries) ObtainTopLevelQueue(ctx context.Context, arg ObtainTopLevelQueueParams) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, obtainTopLevelQueue, arg.LeaseID, arg.VestingTime, arg.QueueZone)
	var lease_id sql.NullString
	err := row.Scan(&lease_id)
	return lease_id, err
}

const selectTopLevelQueues = `-- name: SelectTopLevelQueues :many
select queue_zone, vesting_time, lease_id, hash_token
from quick_top_level_queue
where hash_token < $1
and vesting_time <= now()
`

func (q *Queries) SelectTopLevelQueues(ctx context.Context, hashToken int64) ([]QuickTopLevelQueue, error) {
	rows, err := q.db.Query(ctx, selectTopLevelQueues, hashToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuickTopLevelQueue
	for rows.Next() {
		var i QuickTopLevelQueue
		if err := rows.Scan(
			&i.QueueZone,
			&i.VestingTime,
			&i.LeaseID,
			&i.HashToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
